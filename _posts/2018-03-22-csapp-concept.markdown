---
layout:     post
title:      "计算机系统的本质核心概念"
subtitle:   "总结贴：理解并记录 CSAPP 提及的计算机系统核心概念"
date:       2018-03-22
author:     "ZHR"
header-img: "img/csapp.jpg"
tags:
    - CS:APP
    - 深入理解计算机系统
---

> 本文随着刷书过程更新。
>
> 本文大多数内容来自于《深入理解计算机系统 第三版》。

> 计算机系统是由硬件和系统软件组成的，它们共同工作来运行应用程序。虽然系统的具体实现方式随着时间不断变化，但是系统内在的概念却没有改变。(P1)

## 信息的表示

* 系统中所有的信息都是由一串比特表示的。区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。(P2)
  * 信息 = 位 + 上下文。上下文决定了对一串比特的解释方式。因此，在不同的上下文下，同一个字节序列可能表示一个整数、浮点数、字符串或者机器指令。
* 作为程序员，我们需要了解数字的机器表示方式，因为它们与实际的整数和实数是不同的。它们是对真值的有限近似值，有时候会有意想不到的行为表现。（P2）

## C

* C 语言标准不仅定义了 C 语法，还定义了一系列函数库，即所谓的 C 标准库。
* C 语言小而简单。
* C 语言的指针是造成程序员困惑和程序错误的一个常见原因。
* C 语言缺乏对非常有用的抽象的显式支持，例如类、对象和异常。（P3）

## 编译系统

* 编译系统由预处理器、编译器、汇编器和链接器组成，它们对应着整个编译过程的四个阶段：预处理阶段、编译阶段、汇编阶段和链接阶段。（P3）从下图可以看出，源程序被其他程序翻译成不同的格式。

![compilation system](../img/in-post/compilation-system.jpg)

* 了解编译系统如何工作是大有益处的。（P4：这一部分属于 CSAPP 的脉络）
  * 优化程序性能
  * 理解链接时出现的错误
  * 避免安全漏洞

## 汇编语言

* 汇编语言是非常有用的，因为它为不同高级语言的不同编译器提供了通用的输出语言。（P3）

## Shell

* Shell 是一个命令行解释器。（P5）